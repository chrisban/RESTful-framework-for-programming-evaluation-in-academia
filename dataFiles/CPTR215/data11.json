{    
    "0": {
        "questionType": "mchoice",
        "language": "c++",
        "problem": "Recursion - Refer to the code example for the following questions:",
        "skeleton": "#include <iostream>\nusing namespace std;\n\nvoid CountDown(int countInt) {\n   if (countInt == 0) {\n      cout << \"GO!\" << endl;\n   }\n   else {\n      cout << countInt << endl;\n      CountDown(countInt - 1);\n   }\n   return;\n}\n\nint main() {\n   CountDown(2);\n   return;\n}\n",
        "input": [["How many times is CountDown() called if main() calls CountDown(5)?", ["4", "5", "6"]], ["Is there a difference in how we define the parameters of a recursive versus non-recursive function?", ["Yes", "No"]]],
        "output": ["2", "1"],
        "points": ["2", "2"],
        "difficulty": ".5"
    },
    "1": {
        "questionType": "mchoice",
        "language": "c++",
        "problem": "Recursion - Refer to the code example for the following questions:",
        "skeleton": "int RecAdder(int inValue) {  \n   return RecAdder(inValue + 1);\n}\n",
        "input": [["A memory's stack region can store at most one stack frame.", ["True", "False"]], ["The size of the stack is unlimited.", ["True", "False"]], ["A stack overflow occurs when the stack frame for a function call extends past the end of the stack's memory.", ["True", "False"]], ["The recursive function in the code section will result in a stack overflow.", ["True", "False"]]],
        "output": ["1", "1", "0", "0"],
        "points": ["2", "2", "2", "2"],
        "difficulty": ".5"
    },
    "2": {
        "questionType": "code",
        "language": "c++",
        "problem": "Writing a recursive math function:<br /> Write code to complete RaiseToPower() to compute the result of 4^4. Output should only be the answer.",
        "skeleton": "#include <iostream>\nusing namespace std;\n\nint RaiseToPower(int baseVal, int exponentVal){\n   int resultVal = 0;\n\n   if (exponentVal == 0) {\n      resultVal = 1;\n   }\n   else {\n      resultVal = baseVal * /* insert code here  */;\n   }\n\n   return resultVal;\n}\n\nint main() {\n   int userBase = 4;\n   int userExponent = 4;\n\n   cout << RaiseToPower(userBase, userExponent) << endl;\n\n   return 0;\n}",
        "input": [], 
        "output": ["256"],
        "points": ["4"],
        "difficulty": "1"
    },
    "prop": {
        "time": "10",
        "warn": ["5"]
    }
}
