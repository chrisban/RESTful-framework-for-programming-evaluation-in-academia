------------
Proposal feedback
------------
node.npm
	-> chroot: sandbox

Modularize
	-> authenticate module
	-> try sau? circ auth page @ ldap
	-> plug and play

List requirements: codemirror etc.

Python 3.5.0 -> 3 Specify elsewhere. 
------------



*************
TO RESEARCH:

	- different url per module, not defined in request? check restful standards


*************
TODO: 

	Programming:

		- serve codemirror lang specific js files as needed instead of all regardless (in serveModule)

		- question timing:
			todo:
				- question time countdown change
					-> how much time spent? sub max from left 
						DECIDE WHETHER TO COUNT UP OR DOWN AND UPDATE ACCORDINGLY, SEE TODO comments

		- admin datafile 
			-> json parser
				-> Can also accept mal-formed JSON objects.
					-> _<< >>_ denotes plaintext with line breaks and such that need formatting. ex: "_<<plain text>>_"

		- datafile prop field 
			- what if prop field non-existant or length field NaN/null/etc.?


	Deployment:

		- Remove all console output and shortcut values (hardcoded in modulevars to save me from typing the same shit all the time)

		- Provision (for VMs)

		- lockdown browser (restricted urls - visit exam/docu, not google/SO/etc.)


	Other:
		- graphic related questions
			- feasability? did/didn't do it, why


		- Exam navigation: 
			Currently: can go f/b always but editing part 2 locks part 1
				-> Not done, shouldn't go to part 2?

			datafile specifies


-----------------------------------------------------------------------------------------------------------------------------------

*************
Discussion:
- Web Security: Jason Gates, Ryan
	- disable clipboard
	- screenshots?
	- ways to circumvent/gain advantages
	Ans:
	- eval namespace
	- Object.freeze()

**********
questions:

reset skeleton code
caching issues??

emph. practice exams for familiarity -> make security issues crucial as students have time to try and break it or cheat





*************
Completed:
- Navigation
	- Display one question at a time
	- Nav buttons to switch through problems
	- Display bookmarking/thumbnails for quick nav

- unique student tracking:
	- ID via initial modal?
	- What if entered incorrectly?

- Support for different question types
	done: 
		- server and templates support multiple choice or code based problems
		- Before leaving part one, alert user that part one can no longer be edited after beginning part two
		- randomize mc questions

- submit button submits answer to server
	done: 
		- gathers all code/inputs/problem type/student id/ etc. and submits to server
		- gather all multiple choice answers and submit to server.
		- compile and runs test cases on solution and student code.
		- record grade in flatfile.
		- client submit button warns of submission (modal)
		- report result/score to student (on full completion)
		- fix total score calc

- timing:
	done:
		- suggested timer/progress bar
			- suggested time tag used to select easy -> hard progression
			- connect datafile difficulty to per question timing bars
		- time elapsed, server get code
			- warn user beforehand
		- question time countdown change
				- how much time spent? sub max from left
				- pause time when question switches
				- report time spent

- skeleon:
	- commit button now used for resetting code
	- code can now be reset to original state

- admin: 
	done:
		- upload well-formed json files, rename them and place in correct directory