------------
Proposal feedback
------------
node.npm
	-> chroot: sandbox

Modularize
	-> authenticate module
	-> plug and play

------------
Testing auth:
	auth: users.htpasswd:
		- admin:secret
	cs dom: Ycautpstcy!w.

------------

Furby_King validation



*************
TODO: 
		- add in error handling for port in use
		
		- cron jobs to clear compilation files

		- lockdown browser (restricted urls - visit exam/docu, not google/SO/etc.)


	Other:
		- graphic related questions
			- feasability? did/didn't do it, why


		- Exam navigation: 
			Currently: can go f/b always but editing part 2 locks part 1
				-> Not done, shouldn't go to part 2?

			datafile specifies


-----------------------------------------------------------------------------------------------------------------------------------
*************
Completed:

- Navigation
	- Display one question at a time
	- Nav buttons to switch through problems
	- Display bookmarking/thumbnails for quick nav

- unique student tracking:
	- ID via initial modal?
	- What if entered incorrectly?

- Support for different question types
	done: 
		- server and templates support multiple choice or code based problems
		- Before leaving part one, alert user that part one can no longer be edited after beginning part two
		- randomize mc questions

- submit button submits answer to server
	done: 
		- gathers all code/inputs/problem type/student id/ etc. and submits to server
		- gather all multiple choice answers and submit to server.
		- compile and runs test cases on solution and student code.
		- record grade in flatfile.
		- client submit button warns of submission (modal)
		- report result/score to student (on full completion)
		- fix total score calc

- timing:
	done:
		- suggested timer/progress bar
			- suggested time tag used to select easy -> hard progression
			- connect datafile difficulty to per question timing bars
		- time elapsed, server get code
			- warn user beforehand
		- question time countdown change
				- how much time spent? sub max from left
					-> Decided not to do this, it's more clear to count down and doesn't require large amounts of refactoring in both pbar design, timing backup/restore (pausing), and time reporting in exam results
				- pause time when question switches
				- report time spent

- skeleton:
	- commit button now used for resetting code
	- code can now be reset to original state

- admin: 
	done:
		- upload well-formed json files, rename them and place in correct directory
		- support non-formatted fields (newlines/tabs/etc) 
			_<< >>_ denotes plaintext with line breaks and such that need formatting. ex: "_<<plain text>>_"

- misc
		- serve codemirror lang specific js files as needed instead of all regardless (in serveModule)
			-> ABANDONED: https://discuss.codemirror.net/t/issues-with-dynamically-adding-add-ons-after-load/676

		- Backend

		X -Disable- WARN before using back and refresh button
		
		X Document new prop vals: "closeDate": "9-17-17", "closeTime": "18:30", "allowMultiple: "false"

		X cat results into styled html report

		X implement catches for promise (.then)

		X Test timezone change with closeDate/closeTime

- Deployment:

		- Install C++/Python and ensure path
		- Remove all console output and shortcut values (hardcoded in modulevars to save me from typing the same info all the time)